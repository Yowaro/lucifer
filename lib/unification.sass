// unification.sass
// Definition and Usage and notes from http://www.w3schools.com/ to the date 29.03.2015
// Usage of prefixes, notes and known issues from http://caniuse.com/ to the date 29.03.2015

// Definition and Usage
// The align-content property aligns the flexible container's items when the items do not use all available space on the cross-axis (vertically).
// Tip: Use the justify-content property to align the items on the main-axis (horizontally).
// Note: There must be multiple lines of items for this property to have any effect.
=align-content($value)
	-webkit-align-content: $value // Safari 6.1+, Android 2.1 - 4.3
	-ms-align-content: $value // IE10
	align-content: $value
	display: flex
	flex-flow: row wrap

// Definition and Usage
// The align-items property specifies the default alignment for items inside the flexible container.
// Tip: Use the align-self property of each item to override the align-items property.
=align-items($value)
	-webkit-align-items: $value // Safari 6.1+, Android 2.1 - 4.3
	-ms-align-items: $value // IE10
	align-items: $value
	display: -webkit-flex /* Safari */
	display: flex

// Definition and Usage
// The align-self property specifies the alignment for the selected item inside the flexible container.
// Note: The align-self property overrides the flexible container's align-items property.
=align-self($value)
	-webkit-align-self: $value // Safari 6.1+, Android 2.1 - 4.3
	-ms-align-self: $value // IE10
	align-self: $value

// Definition and Usage
// The animation property is a shorthand property for six of the animation properties:
// animation-name
// animation-duration
// animation-timing-function
// animation-delay
// animation-iteration-count
// animation-direction
// Note: Always specify the animation-duration property, otherwise the duration is 0, and will never be played.
=animation($value)
	-webkit-animation: $value // Chrome, Safari 6.1+, Android 4+
	animation: $value

// Definition and Usage
// The animation-delay property specifies a delay for the start of an animation.
// The animation-delay value is defined in seconds (s) or milliseconds (ms).
=animation-delay($value)
	-webkit-animation-delay: $value // Chrome, Safari 6.1+, Android 4+
	animation-delay: $value


// Definition and Usage
// The animation-direction property defines whether an animation should play in reverse direction or in alternate cycles.
=animation-direction($value)
	-webkit-animation-direction: $value // Chrome, Safari 6.1+, Android 4+
	animation-direction: $value

// Definition and Usage
// The animation-duration property defines how many seconds or milliseconds an animation takes to complete one cycle.
=animation-duration($value)
	-webkit-animation-duration: $value // Chrome, Safari 6.1+, Android 4+
	animation-duration: $value

// Definition and Usage
// The animation-fill-mode property specifies a style for the element when the animation is not playing (when it is finished, or when it has a delay).
// By default, CSS animations do not affect the element until the first keyframe is "played", and then stops once the last keyframe has completed. The animation-fill-mode property can override this behavior.
=animation-fill-mode($value)
	-webkit-animation-fill-mode: $value // Chrome, Safari 6.1+, Android 4+
	animation-fill-mode: $value

// Definition and Usage
// The animation-iteration-count property specifies the number of times an animation should be played.
=animation-iteration-count($value)
	-webkit-animation-iteration-count: $value // Chrome, Safari 6.1+, Android 4+
	animation-iteration-count: $value

// Definition and Usage
// The animation-name property specifies a name for the @keyframes animation.
=animation-name($value)
	-webkit-animation-name: $value // Chrome, Safari 6.1+, Android 4+
	animation-name: $value

// Definition and Usage
// The animation-play-state property specifies whether the animation is running or paused.
// Note: Use this property in a JavaScript to pause an animation in the middle of a cycle.
=animation-play-state($value)
	-webkit-animation-play-state: $value // Chrome, Safari 6.1+, Android 4+
	animation-play-state: $value

// Definition and Usage
// The animation-timing-function specifies the speed curve of an animation.
// The speed curve defines the TIME an animation uses to change from one set of CSS styles to another.
// The speed curve is used to make the changes smoothly.
=animation-timing-function($value)
	-webkit-animation-timing-function: $value // Chrome, Safari 6.1+, Android 4+
	animation-timing-function: $value

// Definition and Usage
// The backface-visibility property defines whether or not an element should be visible when not facing the screen.
// This property is useful when an element is rotated, and you do not want to see its backside.
=backface-visibility($value)
	-webkit-backface-visibility: $value // Safari 4+, Android 3-4.4.4
	backface-visibility: $value

// Definition and Usage
// The column-count property specifies the number of columns an element should be divided into.
// Notes: Partial support refers to not supporting the break-before, break-after, break-inside properties. Webkit browsers do have equivalent support for the non-standard -webkit-column-break-* properties while Firefox supports page-break-* to accomplish the same result.
// Known issues
// In Firefox, the property column-span (or -moz-column-span) does not yet work. See the bug.
// In Chrome, the -webkit-column-count directive does not yet work with print stylesheets. See the following bug in Chromium.
// Chrome is reported to incorrectly calculate the container height, and often breaks on margins, padding, and can display 1px of the next column at the bottom of the previous column.
// In Firefox, if there is not set height of the element, than there will be only one column. For supporting the multiple columns, there need to be set the column-fill property to balanced!
=column-count($value)
	-webkit-column-count: $value // Chrome, Safari, Android
	-moz-column-count: $value // Firefox
	column-count: $value

// Definition and Usage
// The column-fill property specifies how to fill columns, balanced or not.
// This property is available in Firefox only
=column-fill($value)
	-moz-column-fill: $value // Firefox
	column-fill: $value

// Definition and Usage
// The column-gap property specifies the gap between the columns.
// Note: If there is a column-rule between columns, it will appear in the middle of the gap.
=column-gap($value)
	-webkit-column-gap: $value // Chrome, Safari, Android
	-moz-column-gap: $value // Firefox
	column-gap: $value

// Definition and Usage
// The column-rule property is a shorthand property for setting all the column-rule-* properties.
// The column-rule property sets the width, style, and color of the rule between columns.
=column-rule($value)
	-webkit-column-rule: $value // Chrome, Safari, Android
	-moz-column-rule: $value // Firefox
	column-rule: $value

// Definition and Usage
// The column-rule-color property specifies the color of the rule between columns.
=column-rule-color($value)
	-webkit-column-rule-color: $value // Chrome, Safari, Android
	-moz-column-rule-color: $value // Firefox
	column-rule-color: $value

// Definition and Usage
// The column-rule-style property specifies the style of the rule between columns.
=column-rule-style($value)
	-webkit-column-rule-style: $value // Chrome, Safari, Android
	-moz-column-rule-style: $value // Firefox
	column-rule-style: $value

// Definition and Usage
// The column-rule-width property specifies the width of the rule between columns.
=column-rule-width($value)
	-webkit-column-rule-width: $value // Chrome, Safari, Android
	-moz-column-rule-width: $value // Firefox
	column-rule-width: $value

// Definition and Usage
// The column-span property specifies how many columns an element should span across.
=column-span($value)
	-webkit-column-span: $value // Chrome, Safari, Android
	-moz-column-span: $value // Firefox
	column-span: $value

// Definition and Usage
// The column-span property specifies how many columns an element should span across.
=column-width($value)
	-webkit-column-width: $value // Chrome, Safari, Android
	-moz-column-width: $value // Firefox
	column-width: $value

// Definition and Usage
// The columns property is a shorthand property for setting column-width and column-count.
=columns($value)
	-webkit-columns: $value // Chrome, Safari, Android
	-moz-columns: $value // Firefox
	columns: $value

// Definition and Usage
// The flex property specifies the length of the item, relative to the rest of the flexible items inside the same container.
// The flex property is a shorthand for the flex-grow, flex-shrink, and the flex-basis properties.
// Note: If the element is not a flexible item, the flex property has no effect.
// Known issues:
// IE10 and IE11 default values for flex are 0 0 auto rather than 0 1 auto, as per the draft spec, as of September 2013.
// In IE10 and IE11, containers with display: flex and flex-direction: column will not properly calculate their flexed childrens' sizes if the container has min-height but no explicit height property. See bug.
// In Chrome and Safari, the height of (non flex) children are not recognized in percentages. However Firefox and IE recognize and scale the children based on percentage heights. Chrome bug
// Firefox does not support Flexbox in button elements
// Flexbugs: community-curated list of flexbox issues and cross-browser workarounds for them
=flex($value)
	-webkit-flex: $value // Safari, Android 2.1-4.3
	-ms-flex: $value // IE10
	flex: $value

// Definition and Usage
// The flex-basis property specifies the initial length of a flexible item.
// Note: If the element is not a flexible item, the flex-basis property has no effect.
=flex-basis($value)
	-webkit-flex-basis: $value // Safari, Android 2.1-4.3
	flex-basis: $value // IE11+, not supported in IE10!

// Definition and Usage
// The flex-direction property specifies the direction of the flexible items.
// Note: If the element is not a flexible item, the flex-direction property has no effect.
=flex-direction($value)
	-webkit-flex-direction: $value // Safari, Android 2.1-4.3
	flex-direction: $value // IE11+, not supported in IE10!

// Definition and Usage
// The flex-flow property is a shorthand property for the flex-direction and the flex-wrap properties.
// The flex-direction property specifies the direction of the flexible items.
// The flex-wrap property specifies whether the flexible items should wrap or not.
// Note: If the elements are not flexible items, the flex-flow property has no effect.
=flex-flow($value)
	-webkit-flex-flow: $value // Safari, Android 2.1-4.3
	flex-flow: $value // IE11+, not supported in IE10!

// Definition and Usage
// The flex-grow property specifies how much the item will grow relative to the rest of the flexible items inside the same container.
// Note: If the element is not a flexible item, the flex-grow property has no effect.
=flex-grow($value)
	-webkit-flex-grow: $value // Safari, Android 2.1-4.3
	flex-grow: $value // IE11+, not supported in IE10!

// Definition and Usage
// The flex-shrink property specifies how the item will shrink relative to the rest of the flexible items inside the same container.
// Note: If the element is not a flexible item, the flex-shrink property has no effect.
=flex-shrink($value)
	-webkit-flex-shrink: $value // Safari, Android 2.1-4.3
	flex-shrink: $value // IE11+, not supported in IE10!

// Definition and Usage
// The flex-wrap property specifies whether the flexible items should wrap or not.
// Note: If the elements are not flexible items, the flex-wrap property has no effect.
=flex-wrap($value)
	-webkit-flex-wrap: $value // Safari, Android 2.1-4.3
	flex-wrap: $value // IE11+, not supported in IE10!

// Definition and Usage
// The justify-content property aligns the flexible container's items when the items do not use all available space on the main-axis (horizontally).
// Tip: Use the align-content property to align the items on the cross-axis (vertically).
=justify-content($value)
	-webkit-justify-content: $value // Safari, Android 2.1-4.3
	justify-content: $value // IE11+, not supported in IE10!

=keyframes($animation-name)
	@-webkit-keyframes $animation-name
		@content
	@-moz-keyframes $animation-name
		@content
	@-ms-keyframes $animation-name
		@content
	@-o-keyframes $animation-name
		@content 
	@keyframes $animation-name
		@content

// Definition and Usage
// The order property specifies the order of a flexible item relative to the rest of the flexible items inside the same container.
// Note: If the element is not a flexible item, the order property has no effect.
=order($value)
	-webkit-order: $value // Safari
	order: $value // IE11+, not supported in IE10!

// Definition and Usage
// The perspective property defines how many pixels a 3D element is placed from the view. This property allows you to change the perspective on how 3D elements are viewed.
// When defining the perspective property for an element, it is the CHILD elements that get the perspective view, NOT the element itself.
// Note: The perspective property only affects 3D transformed elements!
// Tip: Use this property together with the perspective-origin property, which allows you to change the bottom position of 3D elements.
=perspective($value)
	-webkit-perspective: $value // Safari
	perspective: $value

// Definition and Usage
// The perspective-origin property defines where a 3D element is based in the x- and the y-axis. This property allows you to change the bottom position of 3D elements.
// When defining the perspective-origin property for an element, it is the CHILD elements that are positioned, NOT the element itself.
// Note: This property must be used together with the perspective property, and only affects 3D transformed elements!
=perspective-origin($value)
	-webkit-perspective-origin: $value // Safari
	perspective-origin: $value

// Definition and Usage
// The tab-size property specifies the length of the space used for the tab character.
// In HTML, the tab character is usually displayed as a single space-character, except for some elements, like <textarea> and <pre>, and the result of the tab-size property will only be visible for these elements.
// Known issues:
// Firefox does not yet support <length> values, same as Chrome 41-, Safari and Android as well
=tab-size($value)
	-moz-tab-size: $value // Firefox
	tab-size: $value // Android 4.4+, not supported in previous versions!

// Definition and Usage
// The text-align-last property specifies how to align the last line of a text.
// Note: The text-align-last property will only work for elements with the text-align property set to "justify".
// Note: In Internet Explorer, the "start" and "end" values are not supported.
=text-align-last($value)
	-moz-text-align-last: $value // Firefox
	text-align-last: $value // Not supported in Chrome and Safari!
	text-align: justify

// Definition and Usage
// The text-decoration-color property specifies the color of the text-decoration (underlines, overlines, linethroughs).
// Note: The text-decoration-color property will only have an effect on elements with a visible text-decoration.
// Supported only in Firefox!
=text-decoration-color($value)
	-moz-text-decoration-color: $value // Firefox
	text-decoration-color: $value

// Definition and Usage
// The text-decoration-line property specifies what type of line, if any, the decoration will have.
// Note: You can also set the text-decoration-line using the text-decoration property, which is a short-hand property for the text-decoration-line, text-decoration-style, and the text-decoration-color properties.
// Note: You can also combine more than one value, like underline and overline to display lines both under and over the text.
// Supported only in Firefox!
=text-decoration-line($value)
	-moz-text-decoration-line: $value // Firefox
	text-decoration-line: $value

// Definition and Usage
// The text-decoration-style property specifies how the line, if any, will display.
// Supported only in Firefox!
=text-decoration-style($value)
	-moz-text-decoration-style: $value // Firefox
	text-decoration-style: $value

// Definition and Usage
// The transform property applies a 2D or 3D transformation to an element. This property allows you to rotate, scale, move, skew, etc., elements.
// 2D functions: matrix, translate, scale, rotate, skew
// 3D functions: matrix3d, translate3d, translateZ, scale3d, scaleZ, rotate3d, rotateZ, perspective
// Known issues:
// Scaling transforms in Android 2.3 fails to scale element background images.
// IE 10 and below does not support CSS transforms on SVG elements (though SVG transform attributes do work).
// Transforms may break position:fixed styles of contained elements
// Known issues in 3D:
// Some configurations of Linux and older Windows machines (those without WebGL support) have trouble with 3D transforms and will treat them as if perspective was set as none.
// Firefox on Windows incorrectly renders plugin content within no-op 3D transforms.
// The perspective property doesn't work on the body element in Firefox, it must be used on an inner element.
=transform($value)
	-webkit-transform: $value // Safari, Android 2.1 - 4.4.4
	transform: $value

// Definition and Usage
// The transform-origin property allows you to change the position of transformed elements.
// 2D transformations can change the x- and y-axis of an element. 3D transformations can also change the z-axis of an element.
// Note: This property must be used together with the transform property.
=transform-origin($value)
	-webkit-transform-origin: $value // Safari, Android 2.1 - 4.4.4
	transform-origin: $value

// Definition and Usage
// The transform-style property specifies how nested elements are rendered in 3D space.
// Note: This property must be used together with the transform property.
=transform-style($value)
	-webkit-transform-style: $value // Safari, Android 2.1 - 4.4.4
	transform-style: $value // IE11+, not supported in IE10!

// Definition and Usage
// The transition property is a shorthand property for the four transition properties:
// transition-property, transition-duration, transition-timing-function, and transition-delay.
// Note: Always specify the transition-duration property, otherwise the duration is 0, and the transition will have no effect.
// Known issues:
// Not supported on any pseudo-elements besides ::before and ::after for Firefox, Chrome 26+, Opera 16+ and IE10+.
// Transitionable properties with calc() derived values are not supported below and including IE11 (http://connect.microsoft.com/IE/feedback/details/762719/css3-calc-bug-inside-transition-or-transform)
// 'background-size' is not supported below and including IE10
=transition($value)
	-webkit-transition: $value // Android 2.1 - 4.3
	transition: $value

// Definition and Usage
// The transition-delay property specifies when the transition effect will start.
// The transition-delay value is defined in seconds (s) or milliseconds (ms).
=transition-delay($value)
	-webkit-transition-delay: $value // Android 2.1 - 4.3
	transition-delay: $value

// Definition and Usage
// The transition-duration property specifies how many seconds (s) or milliseconds (ms) a transition effect takes to complete.
=transition-duration($value)
	-webkit-transition-duration: $value // Android 2.1 - 4.3
	transition-duration: $value

// Definition and Usage
// The transition-property property specifies the name of the CSS property the transition effect is for (the transition effect will start when the specified CSS property changes).
// Tip: A transition effect could typically occur when a user hover over an element.
// Note: Always specify the transition-duration property, otherwise the duration is 0, and the transition will have no effect.
=transition-property($value)
	-webkit-transition-property: $value // Android 2.1 - 4.3
	transition-property: $value

// Definition and Usage
// The transition-timing-function property specifies the speed curve of the transition effect.
// This property allows a transition effect to change speed over its duration.
=transition-timing-function($value)
	-webkit-transition-timing-function: $value // Android 2.1 - 4.3
	transition-timing-function: $value